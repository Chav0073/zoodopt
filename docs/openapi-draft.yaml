openapi: 3.0.3
info:
  title: Zoodopt API
  version: 2.0.0
  description: REST API for pet adoption platform connecting shelters with adopters.
  contact:
    name: Zoodopt Development Team
    email: support@zoodopt.com

servers:
  - url: http://localhost:5217
    description: Local development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message
        timestamp:
          type: string
          format: date-time
          description: When the error occurred

    # Auth DTOs
    RegisterDto:
      type: object
      required:
        - email
        - password
        - role
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          minLength: 8
          pattern: "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).+$"
          description: Must contain uppercase, lowercase, and digit
          example: "SecurePass123"
        role:
          type: string
          enum: [Public, ShelterStaff, Admin]
          default: Public
        shelterId:
          type: integer
          description: Required if registering as ShelterStaff
          example: 1

    LoginDto:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          example: "SecurePass123"

    AuthResponseDto:
      type: object
      properties:
        token:
          type: string
          description: JWT authentication token
        email:
          type: string
          format: email
        role:
          type: string

    # User DTOs
    UserProfileDto:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
          format: email
        role:
          type: string
        shelterId:
          type: integer
          nullable: true
        shelterName:
          type: string
          nullable: true

    # Pet DTOs
    PetCreateDto:
      type: object
      required:
        - name
        - type
        - ageGroup
        - shelterId
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          example: "Fluffy"
        type:
          type: string
          maxLength: 50
          example: "Cat"
        ageGroup:
          type: string
          maxLength: 50
          example: "Adult"
        breed:
          type: string
          maxLength: 100
          nullable: true
          example: "Persian"
        gender:
          type: string
          maxLength: 50
          nullable: true
          example: "Female"
        status:
          type: string
          maxLength: 50
          nullable: true
          default: "Available"
          enum: [Available, Pending, Adopted]
          example: "Available"
        description:
          type: string
          maxLength: 1000
          nullable: true
          example: "Friendly and playful cat"
        imageFile:
          type: string
          format: binary
          description: "Image file for the pet (jpg, jpeg, png, gif, webp, max 5MB)"
        shelterId:
          type: integer
          example: 1

    PetUpdateDto:
      type: object
      required:
        - name
        - type
        - ageGroup
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          example: "Fluffy Updated"
        type:
          type: string
          maxLength: 50
          example: "Cat"
        ageGroup:
          type: string
          maxLength: 50
          example: "Senior"
        breed:
          type: string
          maxLength: 100
          nullable: true
          example: "Persian"
        gender:
          type: string
          maxLength: 50
          nullable: true
          example: "Female"
        status:
          type: string
          maxLength: 50
          nullable: true
          enum: [Available, Pending, Adopted]
          example: "Available"
        description:
          type: string
          maxLength: 1000
          nullable: true
          example: "Updated description"
        imageFile:
          type: string
          format: binary
          description: "New image file for the pet (replaces existing image if provided)"

    PetResponseDto:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        type:
          type: string
        ageGroup:
          type: string
        breed:
          type: string
          nullable: true
        gender:
          type: string
          nullable: true
        status:
          type: string
          enum: [Available, Pending, Adopted]
        description:
          type: string
          nullable: true
        imageFileName:
          type: string
          nullable: true
        imageUrl:
          type: string
          nullable: true
          description: "URL to access the pet's image"
          example: "/images/fluffy.jpg"
        shelterId:
          type: integer
        shelterName:
          type: string
          nullable: true

    # Application DTOs
    ApplicationCreateDto:
      type: object
      required:
        - petId
      properties:
        petId:
          type: integer
          example: 1
        message:
          type: string
          nullable: true
          example: "I would love to adopt this pet!"

    ApplicationMessageDto:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: "Updated message about why I want to adopt"

    ApplicationStatusDto:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum: [Pending, Approved, Rejected]
          example: "Approved"

    ApplicationResponseDto:
      type: object
      properties:
        id:
          type: integer
        petId:
          type: integer
        userId:
          type: integer
        message:
          type: string
        status:
          type: string
        submittedAt:
          type: string
          format: date-time
        petName:
          type: string
          nullable: true

    # Shelter DTOs
    ShelterCreateDto:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          example: "New Animal Shelter"
        location:
          type: string
          maxLength: 200
          nullable: true
          example: "123 Pet Street, City, State"
        phone:
          type: string
          maxLength: 20
          nullable: true
          example: "555-123-4567"
        email:
          type: string
          format: email
          maxLength: 100
          nullable: true
          example: "contact@shelter.com"
        description:
          type: string
          maxLength: 1000
          nullable: true
          example: "We specialize in rescuing and rehoming cats and dogs"
        logo:
          type: string
          maxLength: 200
          nullable: true
          example: "shelter-logo.png"

    ShelterUpdateDto:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          example: "Updated Shelter Name"
        location:
          type: string
          maxLength: 200
          nullable: true
          example: "456 New Address, City, State"
        phone:
          type: string
          maxLength: 20
          nullable: true
          example: "555-987-6543"
        email:
          type: string
          format: email
          maxLength: 100
          nullable: true
          example: "updated@shelter.com"
        description:
          type: string
          maxLength: 1000
          nullable: true
          example: "Updated shelter description with new programs"
        logo:
          type: string
          maxLength: 200
          nullable: true
          example: "new-logo.png"

    ShelterResponseDto:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        location:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        logo:
          type: string
          nullable: true
        petCount:
          type: integer

paths:
  # Auth endpoints
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: |
        Register as a public user, shelter staff, or admin.

        **Security**: Public registration is limited to "Public" role only. 
        Admin and ShelterStaff accounts can only be created by existing admin users.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterDto"
      responses:
        "200":
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponseDto"
        "400":
          description: Validation failed or email already in use
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Only administrators can create privileged user accounts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Authenticate user
      description: Log in and receive JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginDto"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponseDto"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout user
      description: Logout user (client should remove JWT token)
      responses:
        "200":
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  timestamp:
                    type: string
                    format: date-time

  # User endpoints
  /users/me:
    get:
      tags:
        - Users
      summary: Get current user profile
      description: Get the profile of the currently authenticated user
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfileDto"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Pet endpoints
  /pets:
    get:
      tags:
        - Pets
      summary: List all pets
      description: Get all adoptable pets with optional filters
      parameters:
        - name: type
          in: query
          description: Filter by pet type
          schema:
            type: string
          example: "Cat"
        - name: ageGroup
          in: query
          description: Filter by age group
          schema:
            type: string
          example: "Adult"
        - name: shelterId
          in: query
          description: Filter by shelter ID
          schema:
            type: integer
          example: 1
      responses:
        "200":
          description: List of pets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PetResponseDto"

    post:
      tags:
        - Pets
      summary: Create a new pet
      description: Add a new pet listing (shelter staff and admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PetCreateDto"
      responses:
        "201":
          description: Pet created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PetResponseDto"
        "400":
          description: Validation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /pets/{id}:
    get:
      tags:
        - Pets
      summary: Get pet by ID
      description: Get details for a specific pet
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      responses:
        "200":
          description: Pet details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PetResponseDto"
        "404":
          description: Pet not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    put:
      tags:
        - Pets
      summary: Update a pet
      description: Update an existing pet (shelter staff and admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PetUpdateDto"
      responses:
        "200":
          description: Pet updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PetResponseDto"
        "400":
          description: Validation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Pet not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags:
        - Pets
      summary: Delete a pet
      description: Delete a pet listing (shelter staff and admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      responses:
        "204":
          description: Pet deleted successfully
        "400":
          description: Cannot delete pet with existing applications
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Pet not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Application endpoints
  /applications:
    get:
      tags:
        - Applications
      summary: List applications
      description: View applications for shelter's pets (shelter staff and admin only)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of applications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApplicationResponseDto"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    post:
      tags:
        - Applications
      summary: Create application
      description: |
        Submit an adoption application.

        **Automatic Workflow**: When an application is submitted for a pet with status "Available", 
        the pet status automatically changes to "Pending".
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationCreateDto"
      responses:
        "201":
          description: Application submitted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationResponseDto"
        "400":
          description: Validation failed or pet doesn't exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Duplicate application for the same pet
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /applications/my-applications:
    get:
      tags:
        - Applications
      summary: Get current user's applications
      description: Get all applications submitted by the current authenticated user, ordered by submission date (newest first)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of user's applications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApplicationResponseDto"
              example:
                - id: 4
                  petId: 2
                  userId: 2
                  message: "I'm an experienced adopter."
                  status: "Pending"
                  submittedAt: "2025-07-31T17:09:04.000Z"
                  petName: "Whiskers"
                - id: 1
                  petId: 1
                  userId: 2
                  message: "I love dogs and have experience adopting."
                  status: "Approved"
                  submittedAt: "2025-07-31T05:02:37.000Z"
                  petName: "Max"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /applications/{id}:
    get:
      tags:
        - Applications
      summary: Get application by ID
      description: Get details for a specific application
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      responses:
        "200":
          description: Application details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationResponseDto"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Application not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags:
        - Applications
      summary: Delete application
      description: Delete an application (applicant or admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      responses:
        "204":
          description: Application deleted successfully
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Application not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /applications/{id}/message:
    put:
      tags:
        - Applications
      summary: Update application message
      description: Update application message (applicant only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationMessageDto"
      responses:
        "200":
          description: Message updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationResponseDto"
        "400":
          description: Validation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Application not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /applications/{id}/status:
    put:
      tags:
        - Applications
      summary: Update application status
      description: |
        Update application status (shelter staff and admin only).

        **Automatic Workflow**:
        - Approving an application automatically sets the pet status to "Adopted"
        - Approving an application automatically rejects all other pending applications for the same pet
        - Rejecting an approved application may revert pet status to "Available" if no other approved applications exist
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationStatusDto"
      responses:
        "200":
          description: Status updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationResponseDto"
        "400":
          description: Validation failed or invalid status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Application not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Shelter endpoints
  /shelters:
    get:
      tags:
        - Shelters
      summary: List all shelters
      description: Get all shelters with pet counts
      responses:
        "200":
          description: List of shelters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ShelterResponseDto"

    post:
      tags:
        - Shelters
      summary: Create a shelter
      description: Create a new shelter (admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShelterCreateDto"
      responses:
        "201":
          description: Shelter created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShelterResponseDto"
        "400":
          description: Validation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Insufficient permissions (admin only)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Shelter name already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /shelters/{id}:
    get:
      tags:
        - Shelters
      summary: Get shelter by ID
      description: Get details for a specific shelter
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      responses:
        "200":
          description: Shelter details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShelterResponseDto"
        "404":
          description: Shelter not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    put:
      tags:
        - Shelters
      summary: Update a shelter
      description: Update an existing shelter (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShelterUpdateDto"
      responses:
        "200":
          description: Shelter updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShelterResponseDto"
        "400":
          description: Validation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Insufficient permissions (admin only)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Shelter not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Shelter name already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags:
        - Shelters
      summary: Delete a shelter
      description: Delete a shelter (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      responses:
        "204":
          description: Shelter deleted successfully
        "400":
          description: Cannot delete shelter with existing pets or staff
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Insufficient permissions (admin only)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Shelter not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

tags:
  - name: Authentication
    description: User authentication endpoints
  - name: Users
    description: User management endpoints
  - name: Pets
    description: Pet management endpoints
  - name: Applications
    description: Adoption application endpoints
  - name: Shelters
    description: Shelter management endpoints
